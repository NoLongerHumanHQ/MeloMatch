// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
  interactions  UserTrackInteraction[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Track {
  id           String    @id @default(uuid())
  title        String
  artist       String
  album        String?
  albumArt     String?
  duration     Int?      // Duration in seconds
  releaseDate  DateTime?
  externalId   String?   // ID from external API (Last.fm, Spotify)
  externalUrl  String?   // URL to external service
  popularity   Float?    // Popularity score (0-100)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  genres       Genre[]        @relation("TrackGenres")
  audioFeatures AudioFeatures?
  interactions UserTrackInteraction[]
  playlists    PlaylistTrack[]
}

model Genre {
  id        String   @id @default(uuid())
  name      String   @unique
  tracks    Track[]  @relation("TrackGenres")
}

model AudioFeatures {
  id            String  @id @default(uuid())
  trackId       String  @unique
  track         Track   @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  // Audio features for recommendation engine
  tempo         Float?  // Beats per minute
  energy        Float?  // Energy level 0.0 to 1.0
  danceability  Float?  // Danceability level 0.0 to 1.0
  acousticness  Float?  // Acousticness level 0.0 to 1.0
  instrumentalness Float? // Instrumentalness level 0.0 to 1.0
  liveness      Float?  // Liveness level 0.0 to 1.0
  valence       Float?  // Musical positiveness 0.0 to 1.0
  speechiness   Float?  // Presence of spoken words 0.0 to 1.0
}

model UserTrackInteraction {
  id        String      @id @default(uuid())
  userId    String
  trackId   String
  type      InteractionType
  rating    Int?        // Optional rating (1-5)
  createdAt DateTime    @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  track     Track       @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId, type])
}

enum InteractionType {
  PLAY
  LIKE
  DISLIKE
  SKIP
}

model Playlist {
  id          String         @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean        @default(false)
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks      PlaylistTrack[]
}

model PlaylistTrack {
  id          String   @id @default(uuid())
  playlistId  String
  trackId     String
  addedAt     DateTime @default(now())

  playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track       Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
} 